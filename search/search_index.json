{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"junior/circuits1/circuits1/","text":"Circuits 1 Notebook","title":"Circuits I"},{"location":"junior/circuits1/circuits1/#circuits-1-notebook","text":"","title":"Circuits 1 Notebook"},{"location":"senior/Computer_Networks/00Inspiration/","text":"Source 00 - Inspiration Before the internet, there was the ARPANET Precursor to the modern internet ARPANET was an academic research project funded by the Advanced Research Projects Agency which was a branch of the military known for funding projects without commercial or military applications. Originally the network only connect the University of Utah with three research centers in California. ARPANET used new technology called packet-switching which breaks data into smaller packets so that they can be transmitted efficiently across the network. Also had the goal of making expensive computing resources more efficient. Computer scientists sometimes used ARPA money to buy computers, and the agency hoped that ARPANET would allow universities to share these expensive resources more efficiently. One of the first applications of ARPANET was Telnet which allowed a researcher at one ARPANET site to log into a computer at another site. 1970: ARPANET expands By the end of 1970 ARPANET had grown to 13 nodes which included East Coast schools like Harvard and MIT. Some of the other early nodes where Bolt, Beranek, and Newman (BBN) - an engineering consulting company that did the engineering work to build ARPANET. Each ARPANET site used a router known as an Interface Message Prcoessor costing $82,200 or half a million in today's money. 1973: ARPANET goes international In 1973 the ARPANET became international, with a satellite link connecting Norway and London to the other nodes in the U.S. Hawaii also joined by satellite. Network not at around 40 nodes. ARPANET applications had begun to emerge: Email was invented in 1971 by a BBN engineer named Ray Tomlinson, who also invented the use of the \"@\" symbol in email addresses. The File Transfer Protocol , which is still used today, allowed ARPANET users to send files to each other. 1982: The ARPANET community grows As the ARPANET entered its second decade, it was still largely confined to the U.S. Academic institutions depended on federal funding to join the network, so the number of nodes expanded slowly. By 1982, the network only had about 100 nodes. This still was big enough for a vibrant online community Long before Facebook and Twitter, ARPANET allowed computer scientists who had access to the network to stay in touch. A new bullentin board system called Usenet was invented in 1980 and caught on quickly. Usenet was organized by topic, allowing users to swap programming tips, recipes, jokes, opinions about science fiction, and much more. hosts.txt Computers need numeric addresses, but which human own which numeric address is hard for people to remember. The ARPANET had no distributed host name database Originally a file named HOSTS.TXT was manually maintained and made available via file sharing by Stanford Research Institute for the ARPANET membership, containing the hostnames and address of hosts as contributed for inclusion by member organizations. **Each network node maintained its own map of the network nodes as needed and assigned them names that were memorable to the users of the system. There was no method for ensuring that all references to a given node in a network were using the same name, nor there a way to read the hosts file of another computer to automatically obtain a copy. The small size of the ARPANET kept the administrative overhead small to maintain an accurate host file. Network nodes typically had one address and could have many names. As local area TCP/IP computer networks gained popularity, however, the maintenance of hosts file names became a larger burden on system administrators as networks and network nodes were being added to the system with increasing frequency. The Domain Name System (DNS) , first described in 1983 and implemented in 1984, automated the publication process and provided instantaneous and dynamic hostname resolution in the rapidly growing network. In modern operating systems, the hosts file remains an alternative name resolution mechanism, configurable often as part of facilities such as the Name Service Switch as either the primary method or as a fallback method. 1984: ARPANET becomes the internet Originally, the entire ARPANET was managed by the military But network operators realized that a centralized network would eventually become unmanageable if they continued to grow. They decided that the network should be reorganized as a decentralized \"network of networks.\" Under this scheme, different networks would be controlled by different organizations, but all the networks able to communicate using shared standards , forming aa shared \"internet.\" The military asked the computer scientists Robert Khan and Vint Cerf to develop new networking standards to make this possible. The result was a set of standards known as TCP/IP These standards specified the basic format of data packets transmitted across the internet. On January 1, 1983, the ARPANET switched to using TCP/IP, marking the birth of the modern internet! The switch to TCP/IP didn't make much difference from a user perspective, since applications like email and Telnet worked about the same as they had before. But the new standard paved the way for much faster network growth by lowering the barrier to entry for new networks. One of the first new networks to connect to the new internet was CSNET, which was funded by the National Science Foundation to link computer science departments across the country. By the time the ARPANET was decommissioned in 1990, it was just one of many networks that comprised the internet. \"Today\" (may be out of date now), the internet is made up of more than 40,000 different networks. These networks still communicate with each other using the TCP/IP standards similar to those that Cerf and Kahn developed in the 1970s. NSFNET: The first internet backbone During the 1980s, the National Science Network funded several super-computing centers around the United States. And in 1986 the agency created a TCP/IP-based network called NSFNET to link those super-computing centers together and allow researchers across the country to use them. The primary goal was to allow computer science researchers to log into the supercomputers and perform academic research. But NSF decided not to limit NSFNET to that purpose, allowing the network to be used for a wide variety of academic purposes . As a result, the NSFNET became the internet's \"backbone\", the high-speed, long-distance network that allowed different parts of the internet to communicate. Schools that didn't have a direct connection to the NSFNET worked together to build regional networks that linked them to each other and to the nearest NSF node. By 1992 there were 6,000 networks connected to NSFNET, with a third of them located overseas. That meant that students and faculty at a growing number of universities had access to email, Usenet, and event a recently-invented application called the World Wide Web! And although the NSFNET was officially restricted to non-commercial use, for-profit companies were increasingly connecting to the network as well, setting the stage for the commercialization of the internet that followed. The internet becomes a global network In 1993, the internet was still dominated by the United States , but it was becoming a truly global network. The privatization of the internet backbone In 1994, the Clinton Administration further facilitated the privatized the internet backbone. Commercial firms that took over the job of carrying long-distance internet traffic , allowing the government-funded NSFNET to be decommissioned . Officials were careful to ensure that no single company controlled too much of the backbone, helping to create a competitive market for internet connectivity that still exists today . By the turn of the century for of the largest long-distance network providers were UUNET, AT&T, Spring, and Level 3. Each had its own nationwide (and global) network, and they competed with each other to provide long-distance connectivity to smaller networks. UUNet became part of WorldCom in 1996, and became part of Verizon in 2006. Today, Verizon operates one of the world's largest internet backbones, in competition with AT&T, Spring, Level 3 and many other companies. How the world gets online: fixed broadband penetration in 2012 There are two primary ways people can long onto the internet: Through a fixed broadband connection at home or in an office and via a wireless connection, often on a cell phone or tablet. This data from the International Telecommunications Union shows how popular fixed internet access is around the world. It shows internet access is widespread in the most parts of the world, but is still fairly scarce in much of sub-Saharan Africa and the Middle East. Fixed internet access allows multiple devices in a customer's home to access the internet. Fixed connections are also ideal for streaming-video services such as Netflix because they tend to have greater capacity than wireless networks. How the world gets online: mobile broadband penetration in 2012 In the developed world, people usually got fixed internet access first and obtained mobile internet devices later. But some developing countries are skipping the construction of fixed broadband networks altogether. This is a cost-effective because a single cell phone tower can provide service to hundreds of customers. For example, 2.7 percent of Egyptians have fixed broadband service at home, but 10 times as many Egyptians have internet access using a cell phone. The story is similar in Ghana, Uzbekistan, Indonesia, South Africa, and Nigeria. Mobile internet access can have profound implications for people in isolated areas. Farmers can use mobile phones to learn about recent market developments, increasing the amount they can get for their crops. Some mobile phone operators also offer sophisticated payment capabilities, allowing people who don't have access to the conventional banking system to make electronic payments. A few wealthy countries, including Japan, South Korea, and Sweden, that have more mobile internet subscriptions than people. Some customers have two or more smartphones, tablets, or other connected mobile devices. World broadband speeds, 2014 Internet access is a lot faster in some places than others. According to Speedtest.net, a website that lets users test their own internet connections, the fastest internet in the world is in Hong Kong , with an average of almost 80 million bits per second (Mbps). Other high-speed countries include Japan, South Korea, Sweden, Romania, the Netherlands, and Switzerland. **The United States clocks in a number 30, with average speeds of 24 Mbps. These figures are worth taking with a grain of salt because they're based on a self-selected sample. Where does your data live? Big companies have centralized locations for data storage (maps can be found online). Smaller web companies store their servers in data centers managed by third parties, but the internet's largest companies have their own dedicated data centers with hundreds of thousands of servers in them. These data centers are located around the world, distributed That has two advantages First, locating data centers close to users allows data to be delivered more quickly. Second, it helps provide redundancy: if the user data is kept in multiple locations, it will be safe even in the event of a catastrophic failure are one data center. Internet censorship around the world In most Western countries, the internet is a free-speech zone where ordinary people express themselves without fear of censorship. But that's not true everywhere. Cuba and several countries in Southeast Asia and the Middle East engage in pervasive censorship and are marked in purple. And then COVID onlined everything... COVID caused a rapid growth of online users worldwide. Users that came online outpaced predictions.","title":"00Inspiration"},{"location":"senior/Computer_Networks/00Inspiration/#00-inspiration","text":"","title":"00 - Inspiration"},{"location":"senior/Computer_Networks/00Inspiration/#before-the-internet-there-was-the-arpanet","text":"Precursor to the modern internet ARPANET was an academic research project funded by the Advanced Research Projects Agency which was a branch of the military known for funding projects without commercial or military applications. Originally the network only connect the University of Utah with three research centers in California. ARPANET used new technology called packet-switching which breaks data into smaller packets so that they can be transmitted efficiently across the network. Also had the goal of making expensive computing resources more efficient. Computer scientists sometimes used ARPA money to buy computers, and the agency hoped that ARPANET would allow universities to share these expensive resources more efficiently. One of the first applications of ARPANET was Telnet which allowed a researcher at one ARPANET site to log into a computer at another site.","title":"Before the internet, there was the ARPANET"},{"location":"senior/Computer_Networks/00Inspiration/#1970-arpanet-expands","text":"By the end of 1970 ARPANET had grown to 13 nodes which included East Coast schools like Harvard and MIT. Some of the other early nodes where Bolt, Beranek, and Newman (BBN) - an engineering consulting company that did the engineering work to build ARPANET. Each ARPANET site used a router known as an Interface Message Prcoessor costing $82,200 or half a million in today's money.","title":"1970: ARPANET expands"},{"location":"senior/Computer_Networks/00Inspiration/#1973-arpanet-goes-international","text":"In 1973 the ARPANET became international, with a satellite link connecting Norway and London to the other nodes in the U.S. Hawaii also joined by satellite. Network not at around 40 nodes. ARPANET applications had begun to emerge: Email was invented in 1971 by a BBN engineer named Ray Tomlinson, who also invented the use of the \"@\" symbol in email addresses. The File Transfer Protocol , which is still used today, allowed ARPANET users to send files to each other.","title":"1973: ARPANET goes international"},{"location":"senior/Computer_Networks/00Inspiration/#1982-the-arpanet-community-grows","text":"As the ARPANET entered its second decade, it was still largely confined to the U.S. Academic institutions depended on federal funding to join the network, so the number of nodes expanded slowly. By 1982, the network only had about 100 nodes. This still was big enough for a vibrant online community Long before Facebook and Twitter, ARPANET allowed computer scientists who had access to the network to stay in touch. A new bullentin board system called Usenet was invented in 1980 and caught on quickly. Usenet was organized by topic, allowing users to swap programming tips, recipes, jokes, opinions about science fiction, and much more.","title":"1982: The ARPANET community grows"},{"location":"senior/Computer_Networks/00Inspiration/#hoststxt","text":"Computers need numeric addresses, but which human own which numeric address is hard for people to remember. The ARPANET had no distributed host name database Originally a file named HOSTS.TXT was manually maintained and made available via file sharing by Stanford Research Institute for the ARPANET membership, containing the hostnames and address of hosts as contributed for inclusion by member organizations. **Each network node maintained its own map of the network nodes as needed and assigned them names that were memorable to the users of the system. There was no method for ensuring that all references to a given node in a network were using the same name, nor there a way to read the hosts file of another computer to automatically obtain a copy. The small size of the ARPANET kept the administrative overhead small to maintain an accurate host file. Network nodes typically had one address and could have many names. As local area TCP/IP computer networks gained popularity, however, the maintenance of hosts file names became a larger burden on system administrators as networks and network nodes were being added to the system with increasing frequency. The Domain Name System (DNS) , first described in 1983 and implemented in 1984, automated the publication process and provided instantaneous and dynamic hostname resolution in the rapidly growing network. In modern operating systems, the hosts file remains an alternative name resolution mechanism, configurable often as part of facilities such as the Name Service Switch as either the primary method or as a fallback method.","title":"hosts.txt"},{"location":"senior/Computer_Networks/00Inspiration/#1984-arpanet-becomes-the-internet","text":"Originally, the entire ARPANET was managed by the military But network operators realized that a centralized network would eventually become unmanageable if they continued to grow. They decided that the network should be reorganized as a decentralized \"network of networks.\" Under this scheme, different networks would be controlled by different organizations, but all the networks able to communicate using shared standards , forming aa shared \"internet.\" The military asked the computer scientists Robert Khan and Vint Cerf to develop new networking standards to make this possible. The result was a set of standards known as TCP/IP These standards specified the basic format of data packets transmitted across the internet. On January 1, 1983, the ARPANET switched to using TCP/IP, marking the birth of the modern internet! The switch to TCP/IP didn't make much difference from a user perspective, since applications like email and Telnet worked about the same as they had before. But the new standard paved the way for much faster network growth by lowering the barrier to entry for new networks. One of the first new networks to connect to the new internet was CSNET, which was funded by the National Science Foundation to link computer science departments across the country. By the time the ARPANET was decommissioned in 1990, it was just one of many networks that comprised the internet. \"Today\" (may be out of date now), the internet is made up of more than 40,000 different networks. These networks still communicate with each other using the TCP/IP standards similar to those that Cerf and Kahn developed in the 1970s.","title":"1984: ARPANET becomes the internet"},{"location":"senior/Computer_Networks/00Inspiration/#nsfnet-the-first-internet-backbone","text":"During the 1980s, the National Science Network funded several super-computing centers around the United States. And in 1986 the agency created a TCP/IP-based network called NSFNET to link those super-computing centers together and allow researchers across the country to use them. The primary goal was to allow computer science researchers to log into the supercomputers and perform academic research. But NSF decided not to limit NSFNET to that purpose, allowing the network to be used for a wide variety of academic purposes . As a result, the NSFNET became the internet's \"backbone\", the high-speed, long-distance network that allowed different parts of the internet to communicate. Schools that didn't have a direct connection to the NSFNET worked together to build regional networks that linked them to each other and to the nearest NSF node. By 1992 there were 6,000 networks connected to NSFNET, with a third of them located overseas. That meant that students and faculty at a growing number of universities had access to email, Usenet, and event a recently-invented application called the World Wide Web! And although the NSFNET was officially restricted to non-commercial use, for-profit companies were increasingly connecting to the network as well, setting the stage for the commercialization of the internet that followed.","title":"NSFNET: The first internet backbone"},{"location":"senior/Computer_Networks/00Inspiration/#the-internet-becomes-a-global-network","text":"In 1993, the internet was still dominated by the United States , but it was becoming a truly global network.","title":"The internet becomes a global network"},{"location":"senior/Computer_Networks/00Inspiration/#the-privatization-of-the-internet-backbone","text":"In 1994, the Clinton Administration further facilitated the privatized the internet backbone. Commercial firms that took over the job of carrying long-distance internet traffic , allowing the government-funded NSFNET to be decommissioned . Officials were careful to ensure that no single company controlled too much of the backbone, helping to create a competitive market for internet connectivity that still exists today . By the turn of the century for of the largest long-distance network providers were UUNET, AT&T, Spring, and Level 3. Each had its own nationwide (and global) network, and they competed with each other to provide long-distance connectivity to smaller networks. UUNet became part of WorldCom in 1996, and became part of Verizon in 2006. Today, Verizon operates one of the world's largest internet backbones, in competition with AT&T, Spring, Level 3 and many other companies.","title":"The privatization of the internet backbone"},{"location":"senior/Computer_Networks/00Inspiration/#how-the-world-gets-online-fixed-broadband-penetration-in-2012","text":"There are two primary ways people can long onto the internet: Through a fixed broadband connection at home or in an office and via a wireless connection, often on a cell phone or tablet. This data from the International Telecommunications Union shows how popular fixed internet access is around the world. It shows internet access is widespread in the most parts of the world, but is still fairly scarce in much of sub-Saharan Africa and the Middle East. Fixed internet access allows multiple devices in a customer's home to access the internet. Fixed connections are also ideal for streaming-video services such as Netflix because they tend to have greater capacity than wireless networks.","title":"How the world gets online: fixed broadband penetration in 2012"},{"location":"senior/Computer_Networks/00Inspiration/#how-the-world-gets-online-mobile-broadband-penetration-in-2012","text":"In the developed world, people usually got fixed internet access first and obtained mobile internet devices later. But some developing countries are skipping the construction of fixed broadband networks altogether. This is a cost-effective because a single cell phone tower can provide service to hundreds of customers. For example, 2.7 percent of Egyptians have fixed broadband service at home, but 10 times as many Egyptians have internet access using a cell phone. The story is similar in Ghana, Uzbekistan, Indonesia, South Africa, and Nigeria. Mobile internet access can have profound implications for people in isolated areas. Farmers can use mobile phones to learn about recent market developments, increasing the amount they can get for their crops. Some mobile phone operators also offer sophisticated payment capabilities, allowing people who don't have access to the conventional banking system to make electronic payments. A few wealthy countries, including Japan, South Korea, and Sweden, that have more mobile internet subscriptions than people. Some customers have two or more smartphones, tablets, or other connected mobile devices.","title":"How the world gets online: mobile broadband penetration in 2012"},{"location":"senior/Computer_Networks/00Inspiration/#world-broadband-speeds-2014","text":"Internet access is a lot faster in some places than others. According to Speedtest.net, a website that lets users test their own internet connections, the fastest internet in the world is in Hong Kong , with an average of almost 80 million bits per second (Mbps). Other high-speed countries include Japan, South Korea, Sweden, Romania, the Netherlands, and Switzerland. **The United States clocks in a number 30, with average speeds of 24 Mbps. These figures are worth taking with a grain of salt because they're based on a self-selected sample.","title":"World broadband speeds, 2014"},{"location":"senior/Computer_Networks/00Inspiration/#where-does-your-data-live","text":"Big companies have centralized locations for data storage (maps can be found online). Smaller web companies store their servers in data centers managed by third parties, but the internet's largest companies have their own dedicated data centers with hundreds of thousands of servers in them. These data centers are located around the world, distributed That has two advantages First, locating data centers close to users allows data to be delivered more quickly. Second, it helps provide redundancy: if the user data is kept in multiple locations, it will be safe even in the event of a catastrophic failure are one data center.","title":"Where does your data live?"},{"location":"senior/Computer_Networks/00Inspiration/#internet-censorship-around-the-world","text":"In most Western countries, the internet is a free-speech zone where ordinary people express themselves without fear of censorship. But that's not true everywhere. Cuba and several countries in Southeast Asia and the Middle East engage in pervasive censorship and are marked in purple.","title":"Internet censorship around the world"},{"location":"senior/Computer_Networks/00Inspiration/#and-then-covid-onlined-everything","text":"COVID caused a rapid growth of online users worldwide. Users that came online outpaced predictions.","title":"And then COVID onlined everything..."},{"location":"senior/Computer_Networks/01Overview/","text":"Source 01 - Overview Perspective 1: Physical and information infrastructure Billions of connected computing devices: - Hosts = end systems - running networks apps - smart devices Communication links: - fiber, copper, radio, satellite - transmission rate: bandwidth Packet switches: - forward packets (chunks of data) - routers and switches Inter-networked networks: - Interconnected ISPs Protocols: - control sending, receiving of messages - e.g., TCP, IP, HTTP, 802.11 Internet standards: - RFC: Request for comments - IETF: Internet Engineering Task Force Perspective 2: Service Infrastructure that provides services to applications: - Web, VoIP, games, e-commerce, social nets,... Provides programming interface to apps: - hooks that allow sending and receiving app programs to \"connect\" to Internet - Provides service options, analogous to postal service Human protocols versus Network protocols A network protocol is similar to a human protocol, except that the entities exchanging messages and taking actions are hardware or software components of some device (fro example, computer, smartphone tablet, router, or other network-capable device). A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other event. All communication activity in Internet governed by protocols, public or proprietary. Packet order **Arrival order packet joke! is a critical to good a make Network edge ** Network edge: - hosts: clients and servers - servers often in data centers Access networks, physical media: - wired, wireless communication links Network core: - interconnected routers network of networks End systems Hosts = end systems, BOTH clients and servers Routers - core DSL ISP Use existing telephone line to central office DSLAM Data over DSL phone line goes to Internet Voice over DSL phone line goes to telephone net < 2.5 Mbps upstream transmission rate (typically < 1 MBbps) < 24 Mbps downstream transmission rate (typically < 10 Mbps) Cable ISP HFC: hybrid fiber coax asymmetric: up to 30 Mbps downstream transmission rate, 2 Mbps upstream transmission rate Network of cable, fiber attaches homes to ISP router Homes share access network to cable head-end Unlink DSL, which has dedicated access to central office frequency division multiplexing: different channels transmitted in different frequency bands Ethernet (like campus) Typically used in companies, universities, etc. 10 Mbps, 100 Mbps, 1 Gbps transmission rates Today, end systems typically connect into Ethernet switch Wireless Two uses of the term: Shared wireless access network connects end system to router via base station aka \"access point\" Wide-area wireless access provided by telco (cellular) operator, 10's km between 1 and 10 Mbps 3G, 4G, LTE, 5G, etc. Terms Computer networks are often classified in function of the geographical area that they cover. LAN: a local area network typically interconnects hosts that are up to a few or maybe a few tens of kilometers apart. MAN: a metropolitan area network typically interconnects devices that are up to a few hundred kilometers apart WAN: a wide area network interconnect hosts that can be located anywhere on Earth. Topology Another classification fo computer networks is based on their physical topology. Full Mesh To allow any host to send messages to any other host in the network, the easiest solution is to organize them as a full-mesh, with a direct and dedicated link between each pair of hosts. Such a physical topology is sometimes used, especially when high performance and high redundancy is required for a small number of hosts. However, it has two major drawbacks. For a network containing n hosts, each host must have n-1 physical interfaces. In practice, the number of physical interfaces on a node will limit the size of a full-mesh network that can be built. Bus The second possible physical organization, which is also used inside computers to connect different extension cards, is the bus. In a bus network , all hosts are attached to a shared medium, usually a cable through a single interface. When one host sends an electrical signal on the bus, the signal is received by all hosts attached to the bus. A drawback of bus-based networks is that if the bus is physically cut, then the network is split into two isolated networks. For this reason, bus-based networks are sometimes considered to be difficult to operate and maintain, especially when the cable is long and there are many places where it can break. Such a bus-based topology was used in the early Ethernet networks. Star A third organization of a computer network is a star topology. In such topologies, hosts have a single physical interface and there is one physical link between each host and the center of the star. The node at the center of the star can be either a piece of equipment that amplifies an electrical signal, or an active device, such as a piece of equipment that understands the format of the messages exchanged through the network. However, if one physical link fails (e.g. because the cable has been cut), then only the node is disconnected from the network. In practice, star-shaped networks are easier to operate and maintain than bus-shaped networks. Many network administrators also appreciate the fact that they can control the network from a central point. Administered from a Web interface, or through a console-like connection, the center of the star is a useful point of control (enabling or disabling devices) and an excellent observation point (usage statistics). Ring A fourth physical organization of a network is the Ring topology. Like the bus organization, each host has a single physical interface connecting it to the ring. Any signal sent by a hot on the ring will be received by all hosts attached to the ring. From a redundancy point of view, a single ring is not the best solution, as the signal only travels in one direction on the ring; Thus if one of the links composing the ring is cut, the entire network fails. In practice, such rings have been used in local area networks, but are now often replaced by star-shaped networks. In metropolitan networks, rings are often used to interconnect multiple locations. In this case, two parallel links, composed of different cables, are often used for redundancy. With such a dual ring, when one ring fails all the traffic can be quickly switched to the other ring. Tree A fifth physical organization of a network is the tree. Such network are typically used when a large number of customers must be connected in a very cost-effective manner. Cable TV networks are often organized as trees. Hybrid In practice, most real networks combine part of these topologies. For example, a campus network can be organized as a ring between the key buildings, while smaller buildings are attached as a tree or a star to important buildings. An ISP network may have a full mesh of devices in the core of its network, and trees to connect remote users. Physical Media Bits: propagates between transmitter/receiver pairs Physical link: what lies between transmitter & receiver Guided media: Signal propagate in solid media: copper, fiber, coax Unguided media: Signals propagate freely, e.g., radio Wire Coaxial cable: Two concentric copper conductors Bidirectional Broadband: Multiple channels on cable Twisted pair (TP) Two insulated copper wires Category 5: 100 Mbps, 1 Gbps Ethernet Category 6: 10 Gbps Fiber optic cable: Glass fiber carrying light pulses, each pulse a bit High-speed operation: High-speed point-to-point transmission (e.g., 10's-100's Gbps transmission rate) Low error rate: Repeaters spaced far apart Immune to electromagnetic noise Radio Signal carried in electromagnetic spectrum No physical \"wire\" Bidirectional Propagation environment effects: Reflection Obstruction by objects Interference Radio link types: Terrestrial microwave e.g. up to 45 Mbps channels LAN (e.g., WiFi) 54 Mbps Wide-area (e.g., cellular) 4G cellular: ~ 10 Mbps Satellite Kbps to 45 Mbps channel (or multiple smaller channels) 270 msec end-end delay geosynchronous versus low altitude Network core Mesh of interconnected routers Packet-switching: Hosts break application-layer messages into packets Forward packets from one router to the next, across links on path from source to destination Each packet transmitted at full link capacity Two key network-core functions Routing: - Determines source-destination route taken by packets - A variety of routing algorithms - Operates on longer time-scales Forwarding: - Move packets from router's input to appropriate router output - Chooses instant path of packet Packet Switching In a network application, end systems exchange messages with each other. Messages can contain anything the application designer wants. Messages may perform a control function (for example, the \"Hi messages in our handshaking example in or can contain data, such as an email message, a JPEG image, or an MP3 audio file.) To send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as packets. Between source and destination, each packet travels through communication links and packet switches (for which there are two predominant types, routers and link-layer switches). To whom? Broadcast In TV and radio transmission, broadcast is often used to indicate a technology that send a video or radio signal to all receivers in a given geographical area. Broadcast is sometimes used in computer networks, but only in local area networks where the number of recipients is limited. Unicast The first and most widespread transmission mode is called unicast. In the unicast transmission mode, information is sent by one sender to one receiver. The example shows a network with two types of devices: hosts (drawn as computers) and intermediate nodes (drawn as cubes). Hosts exchange information via the intermediate nodes. In the example below when host S uses unicast to send information, it send it via three intermediate nodes. Each of these nodes receives the information from its upstream node or hosts, then processes and forwards it to its downstream node or host. This called store and forward and we will see later that his concept is key in computer networks. Multicast A second transmission mode is multicast transmission mode. This mode is used when the same information must be sent to a set of recipients. It was first used in LANs but later became supported in wide area networks. When a sender uses multicast to send information to N receivers, the send sends a single copy of the information and the network nodes duplicate this information necessary, so that it can reach all recipients belonging to the destination group. Anycast The last transmission mode is the anycast transmission mode. It was initially defined in RFC 1542. When a source sends information towards this set of receivers, the network ensures that the information is delivered to one receiver that belongs to this set. Routing and forwarding Every end system has an address called an IP address. Source includes the destination's IP address in the packet's header. Address had a hierarchial structure. Router examines a portion of the packet's destination address and forwards the packet to the best adjacent router. Each router has a forwarding table that maps destination addresses (or portions of the destination addresses) to the router's outbound links. When a packet arrives at a router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link. Multiple routing protocols that are used to automatically develop the forwarding tables themselves. E.g., determine the shortest path from each router to each destination and use the shortest path results to configure the forwarding tables in the routers. Store-and-forward packet switching Takes L/R seconds to transmit (push out) L-bit packet into link at R bps Store and forward: entire packet must arrive at router before it can be transmitted on next link End-end delay = 2L/R (assuming zero propagation delay) one-hop numerical example: L = 7.5 Mb R = 1.5 Mb/s one-hop transmission delay = 5 sec Packet queuing and loss If arrival rate (in bits) to link exceeds transmission rate of link for a period of time, packets will queue, wait to be transmitted on link. Packets can be dropped (lost) if memory (buffer) fills up Circuit switching End-end resources allocated to, reserved for \"call\" between source & dest: In diagram, each link has four circuits. A call gets 2nd circuit in top link and 1st circuit in right link. Dedicated resources: no sharing Circuit-like (guaranteed) performance Circuit segment idle if not used by call (no sharing) Commonly used in traditional telephone networks. A circuit in a link is implemented with either: - Frequency-division multiplexing (FDM) or - Time-division multiplexing (TDM) Packet versus circuit switching Example: 1 Mb/s link Each user: 100 kb.s when \"active\" Active 10% of time Circuit-switching: 10 users Packet switching: With 35 users, probability > 10 active at same time is less than .0004 Packet switching - Great for bursty data - Resource sharing - Simpler, no call setup (reserving a line) - Excessive congestion possible: packet delay and loss - Protocols needed for reliable data transfer, congestion control Global network structure Internet structure: network of networks - End systems connect to Internet via access ISPs (Internet Service Providers) - Residential, company, and university ISPs - Access ISPs in turn must be interconnected. - So that any two hosts can send packets to each other - Resulting network of networks is very complex. - Evolution was driven by economics and national policies - Let's take a step-wise approach to describe current Internet structure Network of ISPs Not just technical considerations: corporate, historical, collusive, regulatory - At center: small number of well-connected large networks - \"Tier-1\" commercial ISPs (e.g., Level 3, Sprint, ATT, NTT), national and international coverage - Content provider network (e.g., Google): - Private network that connects its data centers to Internet, often bypassing tier-1, regional ISPs, - Internet Exchange Point (IXP) is a meeting point where multiple ISPs can peer together. - An IXP is typically in a stand-alone building with its own switches. - There are well over 400 IXps in the Internet \"today\" (may be out of date) Nodal delay at router A Packets queue in router buffers Packet arrival rate to link (temporarily) exceeds output link capacity Packets queue, wait for turn All delay is not the same. If we let d_proc, d_queue, d_trans, and d_prop denote the processing, queuing, transmission, and propagation delays, then the total nodal delay is given by: d_nodal = d_proc + d_queue + d_tans + d_prop Network load The impact of increasing network load is super-linear on delay R: link bandwidth (bps) L: packet length (bits) a: average packet arrival rate La/R ~ 0: avg. queueing delay small La/R -> 1: avg. queueing delay large La/R > 1: more \"work\" arriving than can be serviced, average delay infinite! What do \"real\" Internet delay and loss look like? The traceroute program delay measurement from source to router along end-end Internet towards destination. For all i: - Sends three packets that will reach router i on path towards destination - Router i will return packets to sender - Sender times interval between transmission and reply. Commands to try (watch with Wireshark too): $ traceroute mst.edu $ traceroute www.mst.edu $ traceroute efp1.ch $ traceroute www.epf1.ch Alternative fancier program $ mtr epfl.ch Dropped packets With no place to store such a packet, a router will drop that packet; that is, the packet will be lost. Throughput In addition to delay and packet loss, another critical performance measure in computer networks is end-to-end throughput. To define throughput, consider transferring a large fle from Host A to Host B across a computer network. This transfer might be, for example, a large video clip from one peer to another in a P2P file sharing system. The instantaneous throughput at any instant of time is the rate (in bits/sec) at which the Host B is receiving the file. Bottleneck throughput limitations tend to be servers and local ISPs (edge), not the backbone (core). Protocol layers, service models Networks are complex, with many \"pieces\": hosts routers links of various media applications protocols hardware, software Layered protocols To provide structure to the design of network protocols, network designers organize protocols, and the networks hardware and software that implement the protocols, in layers. In a theoretical vacuum, each protocol belongs to one of the layers, just as a each function in the airline architecture. A protocol layer can be implemented in software, in hardware, or in a combination of the two. When taken together, the protocols of the various layers are called a networking protocol stack. The Internet protocol stack can be oversimplified to five layers: 1. physical , 2. link , 3. network , 4. transport , 5. application , Layering Why layering? Explicit structure allows identification, relationship of complex system's pieces Modularity eases maintenance, updating of system. Change of implementation of layer's service transparent to rest of system. E.g., change in gate procedure doesn't affect rest of system Internet protocol stack 1. Application: Supporting network applications FTP, SMTP, HTTP 2. Transport: OS-process to OS-process data transfer TCP, UDP, and some more rare others 3. Network: Routing of datagrams from source to destination IP, routing protocols 4. Link: Data transfer between neighboring network elements Ethernet, 802.111 (WiFi), ppp, etc. 5. Physical: Bits \"on the wire\" or \"over the airwaves\" Application Supporting network applications - Network applications and their application-layer protocols reside here - Examples: - HTTP Hypertext Transfer Protocol provides for Web document request and transfer - SMTP Simple Mail Transfer Protocol provides for the transfer of e-mail messages - FTP (which provides for the transfer of files between two end systems). - DNS provides translation of human-friendly names for Internet systems to a 32-bit network address (ipv4). This is also done with the help of a specific application-layer protocol, namely, the Domain Name System (DNS). - An application-layer protocol is distributed over multiple end systems, with the application in one end system using the protocol to exchange packets of information with the application in another end system. - Packet of information at application layer is a message. - Encryption often implemented at this layer (though it should at least as low as the Network/IP layer). The upper layer of our architecture is the Application layer. This layer includes all the mechanisms and data structures that are necessary for the applications. Our big-picture book calls these packets ADUs. Transport OS-Process to OS-process data transfer - Transports application-layer messages between application endpoints - In the current Internet, there are two primary transport protocols, TCP and UDP, either of which can transport application-layer messages. - TCP (Transmission Control Protocol) provides a connection-oriented service to its applications. - Guaranteed delivery of application-layer messages to the destination - Flow control (that is, sender/receiver speed matching). - Congestion-control mechanism, so that a source throttles its transmission rate when the network is congested. - UDP (User Datagram Protocol) protocol provides a connectionless service to its applications. - No-frills service that provides no reliabiluty, no flow control, and no congestion control. - Transport-layer packet is a segment . - Most realizations of the network layer, including the internet, do not provide a reliable service. - However, many applications need to exchange information reliably, and so using the network layer service directly would be very difficult for them - Ensuring the reliable delivery of the data produced by application is the task of the transport layer. - Transport layer entities exchange segments. - A segment is a finite sequence of bytes that are transported inside one or more packets. - A transport layer entity issues segments (or sometimes part of segments) as requests to the underlying network layer entity. - The most widely used transport layers on the Internet are TCP, that provides a reliable connection-oriented bytestream transport service, and USP, that provides an unreliable connection-less transport service. - There are some other interesting transport layer protocols, though they are not as common. Network Routing of datagrams from source to destination - Responsible for moving network-layer packets known as datagrams** from one host to another. - Transport-layer protocol (TCP to UDP) from source host passes a transport-layer segment and a destination address to the network layer - Network layer then provides the service of deliverign the segment to the transport layer in the destination host. - Network layer includes the celebrated IP, which defines the fields in the datagram as well as how the end systems and routers act on these fields. - There is only one IP protocol (or two...), and all Internet components that have a network layer must run it. - Network layer also contains many routing protocols that determine the routes - The network layer is built above the datalink layer. - The Datalink layer (below) allows directly connected hsts to exchange information, but it is often necessary to exchange information between hosts that are no attached to the same physical medium. - This is the task of the network layer. - Network layer entities exchange packets. - A packet is a finite sequence of bytes that is transported by the datalink inside one or more frames. - A packet usually contains information about its origin and its destination, and usually passes through several intermediate devices called routers on its way from its origin to its destination. Link / datalink Data transfer between adjacent nodes At each node, the network layer passes the datagram down to the link layer, which delivers the datagram to the next nod along the route. At this next node, the link layer passes the datagram up to the network layer. Some link-layer protocols provide reliable delivery, from transmitting node, over one link, to receiving node. Examples of link-layer protocols include: Ethernet, WiFi, the cable access network's DOCSIS protocol, and more A datagram may be handled by Ethernet on one link and by WiDi on the next link. The network layer (above) will receive a different service from each one of the different link-layer protocols. Link-layer packets are frames The Datalink layer builds on the service provided by the underlying physical layer. The Datalink layer allows two hosts that are directly connected through the physical layer to exchange information. The unit of information exchanged between two entities in the Datalink layer is a frame. A frame is a finite sequence of bits. Some Datalink layers use variable-length frames while others only use fixed-length frames. Some Datalink layers provide a connection-oriented service while other provide a connectionless service. Some Datalink layers provide reliable delivery while others do not guarantee the correct delivery of the information. An important point to note about the Datalink layer is that although the figure below indicates that two entities of the Datalink layer exchange frames directly, in reality this is slightly different. When the Datalink layer entity on the left needs to transmit a frame, it issues as many requests to the underlying physical layer as there are bits in the frame. The physical layer will then convert the sequence of bits in an electromagnetic or optical signal that will be sent over the physical medium. The physical layer on the right hand side of the figure will decode the received signal, recover the bits and issue the corresponding Data. Indication primitives to its Datalink layer entity. If there are no transmission errors, this entity will receive the frame sent earlier. Physical Bits \"on the wire\" - The protocols in this layer are again link dependent and further depend on the actual transmission medium of the link (for example, twisted-pair copper wire, single-mode fiber optics). - For example, Ethernet has many physical-layer protocols: one for twisted-pair copper wire, another for coaxial cable, another for fiber, and so on. - In each case, a bit is moved across the link in a different way. An important point to note about the Physical layer is the service that it provides. This service is usually an unreliable connection-oriented service that allows the users of the Physical layer to exchange bits. The unit of information transfer in the Physical layer is the bit. The Physical layer service is unreliable because: - The Physical layer may change, e.g. due to electromagnetic interferences, the value of a bit being transmitted - The Physical layer may deliver more bits to the receiver than the bits sent by the sender - The Physical layer may deliver fewer bits to the receiver than the bits sent by the sender - The physical layer allows this two or more entities that are directly attached to the same transmission medium to exchange bits. - Being able to exchange bits is important as virtually any information can be encoded as a sequence of bits. - Electrical engineers are used to processing streams of bits, but computer scientists usually prefer to deal with higher level concepts. OSI Presentation: allow applications to interpret meaning of data, e.g., encryption, compression, machine-specific conventions Session: synchronization, checkpointing, recovery of data exchange Internet stack \"missing\" these layers. These services, if needed, myst be implemented in application. Network security Internet not originally designed with (much) security in mind Original vision: \"a group of mutually trusting users attached to a transparent network\" Internet protocol designers playing \"catch-up\" Security considerations in all layers! Field of network security: How bad guys can attack computer networks How we can defend networks against attacks How to design architectures that are immune to attacks Types of attack - DoS (Denial of Service) - the most common attack, often easy - Packet \"sniffing\": broadcast media (shared Ethernet, wireless), promiscuous network interface reads/records all packets (e.g., including passwords!) passing by - Masquerading - and more! Malware Malware can get into host from: virus: self-replicating infection by receiving/executing objects (e.g., e-mail attachment) worm: self-replicating infection by passively receiving object that gets itself executed Spyware malware can record keystrokes, web sites visited, upload info to collection site Infected host can be rolled in botnet, used for spam. DDoS attacks Attack server, network infrasturcture Denial of Service (DoS): attackers make resources (server, bandwidth) unavailable to legitimate traffic by overwhelming resource with bogus traffic Select target Break into hosts Send packets to target from compromised hosts Sniffing packets Packet \"sniffing\": Broadcast media (shared Ethernet, wireless) Promiscuous network interface reads/records all packets (e.g., including passwords!) passing by Wireshark software is a packet sniffer Malicious infrastructure. A trustless \"Distrust the infrastructure\" is a good policy, even when you don't think it's corrupt. Faking addresses IP spoofing: send packet with false source address","title":"01Overview"},{"location":"senior/Computer_Networks/01Overview/#01-overview","text":"","title":"01 - Overview"},{"location":"senior/Computer_Networks/01Overview/#perspective-1-physical-and-information-infrastructure","text":"Billions of connected computing devices: - Hosts = end systems - running networks apps - smart devices Communication links: - fiber, copper, radio, satellite - transmission rate: bandwidth Packet switches: - forward packets (chunks of data) - routers and switches Inter-networked networks: - Interconnected ISPs Protocols: - control sending, receiving of messages - e.g., TCP, IP, HTTP, 802.11 Internet standards: - RFC: Request for comments - IETF: Internet Engineering Task Force","title":"Perspective 1: Physical and information infrastructure"},{"location":"senior/Computer_Networks/01Overview/#perspective-2-service","text":"Infrastructure that provides services to applications: - Web, VoIP, games, e-commerce, social nets,... Provides programming interface to apps: - hooks that allow sending and receiving app programs to \"connect\" to Internet - Provides service options, analogous to postal service","title":"Perspective 2: Service"},{"location":"senior/Computer_Networks/01Overview/#human-protocols-versus-network-protocols","text":"A network protocol is similar to a human protocol, except that the entities exchanging messages and taking actions are hardware or software components of some device (fro example, computer, smartphone tablet, router, or other network-capable device). A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other event. All communication activity in Internet governed by protocols, public or proprietary.","title":"Human protocols versus Network protocols"},{"location":"senior/Computer_Networks/01Overview/#packet-order","text":"**Arrival order packet joke! is a critical to good a make","title":"Packet order"},{"location":"senior/Computer_Networks/01Overview/#network-edge","text":"** Network edge: - hosts: clients and servers - servers often in data centers Access networks, physical media: - wired, wireless communication links Network core: - interconnected routers network of networks","title":"Network edge"},{"location":"senior/Computer_Networks/01Overview/#end-systems","text":"Hosts = end systems, BOTH clients and servers Routers - core","title":"End systems"},{"location":"senior/Computer_Networks/01Overview/#dsl-isp","text":"Use existing telephone line to central office DSLAM Data over DSL phone line goes to Internet Voice over DSL phone line goes to telephone net < 2.5 Mbps upstream transmission rate (typically < 1 MBbps) < 24 Mbps downstream transmission rate (typically < 10 Mbps)","title":"DSL ISP"},{"location":"senior/Computer_Networks/01Overview/#cable-isp","text":"HFC: hybrid fiber coax asymmetric: up to 30 Mbps downstream transmission rate, 2 Mbps upstream transmission rate Network of cable, fiber attaches homes to ISP router Homes share access network to cable head-end Unlink DSL, which has dedicated access to central office frequency division multiplexing: different channels transmitted in different frequency bands","title":"Cable ISP"},{"location":"senior/Computer_Networks/01Overview/#ethernet-like-campus","text":"Typically used in companies, universities, etc. 10 Mbps, 100 Mbps, 1 Gbps transmission rates Today, end systems typically connect into Ethernet switch","title":"Ethernet (like campus)"},{"location":"senior/Computer_Networks/01Overview/#wireless","text":"Two uses of the term: Shared wireless access network connects end system to router via base station aka \"access point\" Wide-area wireless access provided by telco (cellular) operator, 10's km between 1 and 10 Mbps 3G, 4G, LTE, 5G, etc.","title":"Wireless"},{"location":"senior/Computer_Networks/01Overview/#terms","text":"Computer networks are often classified in function of the geographical area that they cover. LAN: a local area network typically interconnects hosts that are up to a few or maybe a few tens of kilometers apart. MAN: a metropolitan area network typically interconnects devices that are up to a few hundred kilometers apart WAN: a wide area network interconnect hosts that can be located anywhere on Earth.","title":"Terms"},{"location":"senior/Computer_Networks/01Overview/#topology","text":"Another classification fo computer networks is based on their physical topology. Full Mesh To allow any host to send messages to any other host in the network, the easiest solution is to organize them as a full-mesh, with a direct and dedicated link between each pair of hosts. Such a physical topology is sometimes used, especially when high performance and high redundancy is required for a small number of hosts. However, it has two major drawbacks. For a network containing n hosts, each host must have n-1 physical interfaces. In practice, the number of physical interfaces on a node will limit the size of a full-mesh network that can be built. Bus The second possible physical organization, which is also used inside computers to connect different extension cards, is the bus. In a bus network , all hosts are attached to a shared medium, usually a cable through a single interface. When one host sends an electrical signal on the bus, the signal is received by all hosts attached to the bus. A drawback of bus-based networks is that if the bus is physically cut, then the network is split into two isolated networks. For this reason, bus-based networks are sometimes considered to be difficult to operate and maintain, especially when the cable is long and there are many places where it can break. Such a bus-based topology was used in the early Ethernet networks. Star A third organization of a computer network is a star topology. In such topologies, hosts have a single physical interface and there is one physical link between each host and the center of the star. The node at the center of the star can be either a piece of equipment that amplifies an electrical signal, or an active device, such as a piece of equipment that understands the format of the messages exchanged through the network. However, if one physical link fails (e.g. because the cable has been cut), then only the node is disconnected from the network. In practice, star-shaped networks are easier to operate and maintain than bus-shaped networks. Many network administrators also appreciate the fact that they can control the network from a central point. Administered from a Web interface, or through a console-like connection, the center of the star is a useful point of control (enabling or disabling devices) and an excellent observation point (usage statistics). Ring A fourth physical organization of a network is the Ring topology. Like the bus organization, each host has a single physical interface connecting it to the ring. Any signal sent by a hot on the ring will be received by all hosts attached to the ring. From a redundancy point of view, a single ring is not the best solution, as the signal only travels in one direction on the ring; Thus if one of the links composing the ring is cut, the entire network fails. In practice, such rings have been used in local area networks, but are now often replaced by star-shaped networks. In metropolitan networks, rings are often used to interconnect multiple locations. In this case, two parallel links, composed of different cables, are often used for redundancy. With such a dual ring, when one ring fails all the traffic can be quickly switched to the other ring. Tree A fifth physical organization of a network is the tree. Such network are typically used when a large number of customers must be connected in a very cost-effective manner. Cable TV networks are often organized as trees. Hybrid In practice, most real networks combine part of these topologies. For example, a campus network can be organized as a ring between the key buildings, while smaller buildings are attached as a tree or a star to important buildings. An ISP network may have a full mesh of devices in the core of its network, and trees to connect remote users.","title":"Topology"},{"location":"senior/Computer_Networks/01Overview/#physical-media","text":"Bits: propagates between transmitter/receiver pairs Physical link: what lies between transmitter & receiver Guided media: Signal propagate in solid media: copper, fiber, coax Unguided media: Signals propagate freely, e.g., radio","title":"Physical Media"},{"location":"senior/Computer_Networks/01Overview/#wire","text":"Coaxial cable: Two concentric copper conductors Bidirectional Broadband: Multiple channels on cable Twisted pair (TP) Two insulated copper wires Category 5: 100 Mbps, 1 Gbps Ethernet Category 6: 10 Gbps Fiber optic cable: Glass fiber carrying light pulses, each pulse a bit High-speed operation: High-speed point-to-point transmission (e.g., 10's-100's Gbps transmission rate) Low error rate: Repeaters spaced far apart Immune to electromagnetic noise","title":"Wire"},{"location":"senior/Computer_Networks/01Overview/#radio","text":"Signal carried in electromagnetic spectrum No physical \"wire\" Bidirectional Propagation environment effects: Reflection Obstruction by objects Interference Radio link types: Terrestrial microwave e.g. up to 45 Mbps channels LAN (e.g., WiFi) 54 Mbps Wide-area (e.g., cellular) 4G cellular: ~ 10 Mbps Satellite Kbps to 45 Mbps channel (or multiple smaller channels) 270 msec end-end delay geosynchronous versus low altitude","title":"Radio"},{"location":"senior/Computer_Networks/01Overview/#network-core","text":"Mesh of interconnected routers Packet-switching: Hosts break application-layer messages into packets Forward packets from one router to the next, across links on path from source to destination Each packet transmitted at full link capacity","title":"Network core"},{"location":"senior/Computer_Networks/01Overview/#two-key-network-core-functions","text":"Routing: - Determines source-destination route taken by packets - A variety of routing algorithms - Operates on longer time-scales Forwarding: - Move packets from router's input to appropriate router output - Chooses instant path of packet","title":"Two key network-core functions"},{"location":"senior/Computer_Networks/01Overview/#packet-switching","text":"In a network application, end systems exchange messages with each other. Messages can contain anything the application designer wants. Messages may perform a control function (for example, the \"Hi messages in our handshaking example in or can contain data, such as an email message, a JPEG image, or an MP3 audio file.) To send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as packets. Between source and destination, each packet travels through communication links and packet switches (for which there are two predominant types, routers and link-layer switches).","title":"Packet Switching"},{"location":"senior/Computer_Networks/01Overview/#to-whom","text":"Broadcast In TV and radio transmission, broadcast is often used to indicate a technology that send a video or radio signal to all receivers in a given geographical area. Broadcast is sometimes used in computer networks, but only in local area networks where the number of recipients is limited. Unicast The first and most widespread transmission mode is called unicast. In the unicast transmission mode, information is sent by one sender to one receiver. The example shows a network with two types of devices: hosts (drawn as computers) and intermediate nodes (drawn as cubes). Hosts exchange information via the intermediate nodes. In the example below when host S uses unicast to send information, it send it via three intermediate nodes. Each of these nodes receives the information from its upstream node or hosts, then processes and forwards it to its downstream node or host. This called store and forward and we will see later that his concept is key in computer networks. Multicast A second transmission mode is multicast transmission mode. This mode is used when the same information must be sent to a set of recipients. It was first used in LANs but later became supported in wide area networks. When a sender uses multicast to send information to N receivers, the send sends a single copy of the information and the network nodes duplicate this information necessary, so that it can reach all recipients belonging to the destination group. Anycast The last transmission mode is the anycast transmission mode. It was initially defined in RFC 1542. When a source sends information towards this set of receivers, the network ensures that the information is delivered to one receiver that belongs to this set.","title":"To whom?"},{"location":"senior/Computer_Networks/01Overview/#routing-and-forwarding","text":"Every end system has an address called an IP address. Source includes the destination's IP address in the packet's header. Address had a hierarchial structure. Router examines a portion of the packet's destination address and forwards the packet to the best adjacent router. Each router has a forwarding table that maps destination addresses (or portions of the destination addresses) to the router's outbound links. When a packet arrives at a router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link. Multiple routing protocols that are used to automatically develop the forwarding tables themselves. E.g., determine the shortest path from each router to each destination and use the shortest path results to configure the forwarding tables in the routers.","title":"Routing and forwarding"},{"location":"senior/Computer_Networks/01Overview/#store-and-forward-packet-switching","text":"Takes L/R seconds to transmit (push out) L-bit packet into link at R bps Store and forward: entire packet must arrive at router before it can be transmitted on next link End-end delay = 2L/R (assuming zero propagation delay) one-hop numerical example: L = 7.5 Mb R = 1.5 Mb/s one-hop transmission delay = 5 sec","title":"Store-and-forward packet switching"},{"location":"senior/Computer_Networks/01Overview/#packet-queuing-and-loss","text":"If arrival rate (in bits) to link exceeds transmission rate of link for a period of time, packets will queue, wait to be transmitted on link. Packets can be dropped (lost) if memory (buffer) fills up","title":"Packet queuing and loss"},{"location":"senior/Computer_Networks/01Overview/#circuit-switching","text":"End-end resources allocated to, reserved for \"call\" between source & dest: In diagram, each link has four circuits. A call gets 2nd circuit in top link and 1st circuit in right link. Dedicated resources: no sharing Circuit-like (guaranteed) performance Circuit segment idle if not used by call (no sharing) Commonly used in traditional telephone networks. A circuit in a link is implemented with either: - Frequency-division multiplexing (FDM) or - Time-division multiplexing (TDM)","title":"Circuit switching"},{"location":"senior/Computer_Networks/01Overview/#packet-versus-circuit-switching","text":"Example: 1 Mb/s link Each user: 100 kb.s when \"active\" Active 10% of time Circuit-switching: 10 users Packet switching: With 35 users, probability > 10 active at same time is less than .0004 Packet switching - Great for bursty data - Resource sharing - Simpler, no call setup (reserving a line) - Excessive congestion possible: packet delay and loss - Protocols needed for reliable data transfer, congestion control","title":"Packet versus circuit switching"},{"location":"senior/Computer_Networks/01Overview/#global-network-structure","text":"Internet structure: network of networks - End systems connect to Internet via access ISPs (Internet Service Providers) - Residential, company, and university ISPs - Access ISPs in turn must be interconnected. - So that any two hosts can send packets to each other - Resulting network of networks is very complex. - Evolution was driven by economics and national policies - Let's take a step-wise approach to describe current Internet structure Network of ISPs Not just technical considerations: corporate, historical, collusive, regulatory - At center: small number of well-connected large networks - \"Tier-1\" commercial ISPs (e.g., Level 3, Sprint, ATT, NTT), national and international coverage - Content provider network (e.g., Google): - Private network that connects its data centers to Internet, often bypassing tier-1, regional ISPs, - Internet Exchange Point (IXP) is a meeting point where multiple ISPs can peer together. - An IXP is typically in a stand-alone building with its own switches. - There are well over 400 IXps in the Internet \"today\" (may be out of date)","title":"Global network structure"},{"location":"senior/Computer_Networks/01Overview/#nodal-delay-at-router-a","text":"Packets queue in router buffers Packet arrival rate to link (temporarily) exceeds output link capacity Packets queue, wait for turn All delay is not the same. If we let d_proc, d_queue, d_trans, and d_prop denote the processing, queuing, transmission, and propagation delays, then the total nodal delay is given by: d_nodal = d_proc + d_queue + d_tans + d_prop Network load The impact of increasing network load is super-linear on delay R: link bandwidth (bps) L: packet length (bits) a: average packet arrival rate La/R ~ 0: avg. queueing delay small La/R -> 1: avg. queueing delay large La/R > 1: more \"work\" arriving than can be serviced, average delay infinite!","title":"Nodal delay at router A"},{"location":"senior/Computer_Networks/01Overview/#what-do-real-internet-delay-and-loss-look-like","text":"The traceroute program delay measurement from source to router along end-end Internet towards destination. For all i: - Sends three packets that will reach router i on path towards destination - Router i will return packets to sender - Sender times interval between transmission and reply.","title":"What do \"real\" Internet delay and loss look like?"},{"location":"senior/Computer_Networks/01Overview/#commands-to-try","text":"(watch with Wireshark too): $ traceroute mst.edu $ traceroute www.mst.edu $ traceroute efp1.ch $ traceroute www.epf1.ch Alternative fancier program $ mtr epfl.ch","title":"Commands to try"},{"location":"senior/Computer_Networks/01Overview/#dropped-packets","text":"With no place to store such a packet, a router will drop that packet; that is, the packet will be lost.","title":"Dropped packets"},{"location":"senior/Computer_Networks/01Overview/#throughput","text":"In addition to delay and packet loss, another critical performance measure in computer networks is end-to-end throughput. To define throughput, consider transferring a large fle from Host A to Host B across a computer network. This transfer might be, for example, a large video clip from one peer to another in a P2P file sharing system. The instantaneous throughput at any instant of time is the rate (in bits/sec) at which the Host B is receiving the file. Bottleneck throughput limitations tend to be servers and local ISPs (edge), not the backbone (core).","title":"Throughput"},{"location":"senior/Computer_Networks/01Overview/#protocol-layers-service-models","text":"Networks are complex, with many \"pieces\": hosts routers links of various media applications protocols hardware, software","title":"Protocol layers, service models"},{"location":"senior/Computer_Networks/01Overview/#layered-protocols","text":"To provide structure to the design of network protocols, network designers organize protocols, and the networks hardware and software that implement the protocols, in layers. In a theoretical vacuum, each protocol belongs to one of the layers, just as a each function in the airline architecture. A protocol layer can be implemented in software, in hardware, or in a combination of the two. When taken together, the protocols of the various layers are called a networking protocol stack. The Internet protocol stack can be oversimplified to five layers: 1. physical , 2. link , 3. network , 4. transport , 5. application ,","title":"Layered protocols"},{"location":"senior/Computer_Networks/01Overview/#layering","text":"Why layering? Explicit structure allows identification, relationship of complex system's pieces Modularity eases maintenance, updating of system. Change of implementation of layer's service transparent to rest of system. E.g., change in gate procedure doesn't affect rest of system Internet protocol stack 1. Application: Supporting network applications FTP, SMTP, HTTP 2. Transport: OS-process to OS-process data transfer TCP, UDP, and some more rare others 3. Network: Routing of datagrams from source to destination IP, routing protocols 4. Link: Data transfer between neighboring network elements Ethernet, 802.111 (WiFi), ppp, etc. 5. Physical: Bits \"on the wire\" or \"over the airwaves\"","title":"Layering"},{"location":"senior/Computer_Networks/01Overview/#application","text":"Supporting network applications - Network applications and their application-layer protocols reside here - Examples: - HTTP Hypertext Transfer Protocol provides for Web document request and transfer - SMTP Simple Mail Transfer Protocol provides for the transfer of e-mail messages - FTP (which provides for the transfer of files between two end systems). - DNS provides translation of human-friendly names for Internet systems to a 32-bit network address (ipv4). This is also done with the help of a specific application-layer protocol, namely, the Domain Name System (DNS). - An application-layer protocol is distributed over multiple end systems, with the application in one end system using the protocol to exchange packets of information with the application in another end system. - Packet of information at application layer is a message. - Encryption often implemented at this layer (though it should at least as low as the Network/IP layer). The upper layer of our architecture is the Application layer. This layer includes all the mechanisms and data structures that are necessary for the applications. Our big-picture book calls these packets ADUs.","title":"Application"},{"location":"senior/Computer_Networks/01Overview/#transport","text":"OS-Process to OS-process data transfer - Transports application-layer messages between application endpoints - In the current Internet, there are two primary transport protocols, TCP and UDP, either of which can transport application-layer messages. - TCP (Transmission Control Protocol) provides a connection-oriented service to its applications. - Guaranteed delivery of application-layer messages to the destination - Flow control (that is, sender/receiver speed matching). - Congestion-control mechanism, so that a source throttles its transmission rate when the network is congested. - UDP (User Datagram Protocol) protocol provides a connectionless service to its applications. - No-frills service that provides no reliabiluty, no flow control, and no congestion control. - Transport-layer packet is a segment . - Most realizations of the network layer, including the internet, do not provide a reliable service. - However, many applications need to exchange information reliably, and so using the network layer service directly would be very difficult for them - Ensuring the reliable delivery of the data produced by application is the task of the transport layer. - Transport layer entities exchange segments. - A segment is a finite sequence of bytes that are transported inside one or more packets. - A transport layer entity issues segments (or sometimes part of segments) as requests to the underlying network layer entity. - The most widely used transport layers on the Internet are TCP, that provides a reliable connection-oriented bytestream transport service, and USP, that provides an unreliable connection-less transport service. - There are some other interesting transport layer protocols, though they are not as common.","title":"Transport"},{"location":"senior/Computer_Networks/01Overview/#network","text":"Routing of datagrams from source to destination - Responsible for moving network-layer packets known as datagrams** from one host to another. - Transport-layer protocol (TCP to UDP) from source host passes a transport-layer segment and a destination address to the network layer - Network layer then provides the service of deliverign the segment to the transport layer in the destination host. - Network layer includes the celebrated IP, which defines the fields in the datagram as well as how the end systems and routers act on these fields. - There is only one IP protocol (or two...), and all Internet components that have a network layer must run it. - Network layer also contains many routing protocols that determine the routes - The network layer is built above the datalink layer. - The Datalink layer (below) allows directly connected hsts to exchange information, but it is often necessary to exchange information between hosts that are no attached to the same physical medium. - This is the task of the network layer. - Network layer entities exchange packets. - A packet is a finite sequence of bytes that is transported by the datalink inside one or more frames. - A packet usually contains information about its origin and its destination, and usually passes through several intermediate devices called routers on its way from its origin to its destination.","title":"Network"},{"location":"senior/Computer_Networks/01Overview/#link-datalink","text":"Data transfer between adjacent nodes At each node, the network layer passes the datagram down to the link layer, which delivers the datagram to the next nod along the route. At this next node, the link layer passes the datagram up to the network layer. Some link-layer protocols provide reliable delivery, from transmitting node, over one link, to receiving node. Examples of link-layer protocols include: Ethernet, WiFi, the cable access network's DOCSIS protocol, and more A datagram may be handled by Ethernet on one link and by WiDi on the next link. The network layer (above) will receive a different service from each one of the different link-layer protocols. Link-layer packets are frames The Datalink layer builds on the service provided by the underlying physical layer. The Datalink layer allows two hosts that are directly connected through the physical layer to exchange information. The unit of information exchanged between two entities in the Datalink layer is a frame. A frame is a finite sequence of bits. Some Datalink layers use variable-length frames while others only use fixed-length frames. Some Datalink layers provide a connection-oriented service while other provide a connectionless service. Some Datalink layers provide reliable delivery while others do not guarantee the correct delivery of the information. An important point to note about the Datalink layer is that although the figure below indicates that two entities of the Datalink layer exchange frames directly, in reality this is slightly different. When the Datalink layer entity on the left needs to transmit a frame, it issues as many requests to the underlying physical layer as there are bits in the frame. The physical layer will then convert the sequence of bits in an electromagnetic or optical signal that will be sent over the physical medium. The physical layer on the right hand side of the figure will decode the received signal, recover the bits and issue the corresponding Data. Indication primitives to its Datalink layer entity. If there are no transmission errors, this entity will receive the frame sent earlier.","title":"Link / datalink"},{"location":"senior/Computer_Networks/01Overview/#physical","text":"Bits \"on the wire\" - The protocols in this layer are again link dependent and further depend on the actual transmission medium of the link (for example, twisted-pair copper wire, single-mode fiber optics). - For example, Ethernet has many physical-layer protocols: one for twisted-pair copper wire, another for coaxial cable, another for fiber, and so on. - In each case, a bit is moved across the link in a different way. An important point to note about the Physical layer is the service that it provides. This service is usually an unreliable connection-oriented service that allows the users of the Physical layer to exchange bits. The unit of information transfer in the Physical layer is the bit. The Physical layer service is unreliable because: - The Physical layer may change, e.g. due to electromagnetic interferences, the value of a bit being transmitted - The Physical layer may deliver more bits to the receiver than the bits sent by the sender - The Physical layer may deliver fewer bits to the receiver than the bits sent by the sender - The physical layer allows this two or more entities that are directly attached to the same transmission medium to exchange bits. - Being able to exchange bits is important as virtually any information can be encoded as a sequence of bits. - Electrical engineers are used to processing streams of bits, but computer scientists usually prefer to deal with higher level concepts.","title":"Physical"},{"location":"senior/Computer_Networks/01Overview/#osi","text":"Presentation: allow applications to interpret meaning of data, e.g., encryption, compression, machine-specific conventions Session: synchronization, checkpointing, recovery of data exchange Internet stack \"missing\" these layers. These services, if needed, myst be implemented in application.","title":"OSI"},{"location":"senior/Computer_Networks/01Overview/#network-security","text":"Internet not originally designed with (much) security in mind Original vision: \"a group of mutually trusting users attached to a transparent network\" Internet protocol designers playing \"catch-up\" Security considerations in all layers! Field of network security: How bad guys can attack computer networks How we can defend networks against attacks How to design architectures that are immune to attacks Types of attack - DoS (Denial of Service) - the most common attack, often easy - Packet \"sniffing\": broadcast media (shared Ethernet, wireless), promiscuous network interface reads/records all packets (e.g., including passwords!) passing by - Masquerading - and more!","title":"Network security"},{"location":"senior/Computer_Networks/01Overview/#malware","text":"Malware can get into host from: virus: self-replicating infection by receiving/executing objects (e.g., e-mail attachment) worm: self-replicating infection by passively receiving object that gets itself executed Spyware malware can record keystrokes, web sites visited, upload info to collection site Infected host can be rolled in botnet, used for spam. DDoS attacks","title":"Malware"},{"location":"senior/Computer_Networks/01Overview/#attack-server-network-infrasturcture","text":"Denial of Service (DoS): attackers make resources (server, bandwidth) unavailable to legitimate traffic by overwhelming resource with bogus traffic Select target Break into hosts Send packets to target from compromised hosts","title":"Attack server, network infrasturcture"},{"location":"senior/Computer_Networks/01Overview/#sniffing-packets","text":"Packet \"sniffing\": Broadcast media (shared Ethernet, wireless) Promiscuous network interface reads/records all packets (e.g., including passwords!) passing by Wireshark software is a packet sniffer Malicious infrastructure. A trustless \"Distrust the infrastructure\" is a good policy, even when you don't think it's corrupt.","title":"Sniffing packets"},{"location":"senior/Computer_Networks/01Overview/#faking-addresses","text":"IP spoofing: send packet with false source address","title":"Faking addresses"},{"location":"senior/Computer_Networks/02Application/","text":"Source 02 - Application Network applications Classic text-based applications that became popular in the 1970s and 1980s: text email. remote access to computers, file transfers, and newsgroups. Killer application of the mid-1990s: The World Wide Web, encompassing Web surfing, search, and electronic commerce. Instant messaging and P2P file sharing, the two killer applications introduced at the end of the millennium. Since 2000, voice-over-IP (VoIP), YouTube, Netflix, World of Warcraft, Facebook, and Twitter. Goal write program that: - run on (different) end systems - communicate over network - e.g., web server software communicates with browser software No need (or desire) to write software for network-core devices: - network-core devices do not (and SHOULD not) run user applications! - applications on end systems allows for rapid app development, propagation, innovation - this is changing somewhat, which could impede the development of new protocols. Server Always-on host, called the server, which services requests from many other hosts, called clients. permanent address IP address Overlay/hash address of some kind in the case of IP-anonymizing networks Web server services requests from browsers running on client hosts. When a Web server receives a request for an object from a client hosts, it responds by sending the requested object to the client host. Now in data centers for scaling Client Communicate with server Maybe be intermittently connected May have dynamic IP addresses (or dynamically changing overlay addresses) Do not usually communicate directly with each other (unless hybrid client-server/p2p with p2p). P2P architecture Minimal (or no) reliance on dedicated servers in data centers. Direct communication between pairs of intermittently connected hosts, called peers. The peers are not owned by the service provider, but are instead desktops and laptops controlled by users, with most of the peers residing in homes, universities, and offices. Peers request service from other peers, provide service in return to other peers Self-scalability: each peer adds service capacity to the system by distributing files to other peers. Cost effective, since they normally don't require significant server infrastructure and server bandwidth (in contrast with clients-server designs with data centers) Peers often exchange IP addresses (or overlay address, e.g., onion, garlic routing and crypto addresses). Complex management, implementation, debugging? Processes It's not actually programs, but processes that communicate with each other. A process is assigned by OS to a program that is running within an end system. WHen processes are running on the same end system, they can communicate with each other with inter-process communication (IPC) Processes on two different end systems communicate with each other by exchanging messages across the computer network. A sending process creates and sends messages into the network A receiving process receives these messages and possibly responds by sending messages back. Processes that initiates that communication (that is, initially contacts the other process at the beginning of the session) is nominally, if not substantially, labeled as the client . The process that waits to be contacted to begin the session is nominally the server Sockets Any message sent from one process to another must go through the underlying network. A process sends messages into, and receives messages from, the network through an OS-defined software interface called a socket . A socket is the interface between the application layer and the within a host OS. It is also referred to as the Application Programming Interface (API) between the application and the network, since the socket is the programming interface with which network applications are built. Addresses To receive messages, process must have identifier Q: Does the IP address of a host, on which a process runs, suffice for identifying the process? A: No, many processes can be running on one host In order for a process running on one host to send packets to a process running on another host, the receiving process needs to have an address with: address of the host OS itself (IP) Identifier that specifies the specific receiving process in the destination host OS Popular applications have been assigned specific port numbers, e.g., A Web server (using the HTTP protocol) is usually identified by port number 80. A mail server process (using the SMTP protocol) is usually identified by port number 25. An SSH server is usually identified on port number 22. For example, to send HTTP message to gaia.cs.umass.edu web server: IP address: 128.119.245.12 port number: 80 Hosts are often identified by IP address - IP address is a 32-bit quantity uniquely identifying the host, in ipv4. - Addresses are 128 bit for ipv6. - We ran out of ipv4 addresses... - The sending process must also identify the receiving process (more specifically, the receiving socket) running in the host. - This is information is needed because in general a host could be running many network applications. - A destination port number serves this purpose. Preview of transport services Data integrity - Some apps (e.g., file transfer, web transactions) require 100% reliable data transfer - Other apps (e.g., audio) can tolerate some loss timing - Some apps (e.g., Internet telephony, interactive games) require low delay to be \"effective\" - Some apps (e.g., file download) tolerate delay throughput - Some apps (e.g., multimedia) require minimum amount of throughput to be \"effective\" - Other apps (\"elastic apps\") make use of whatever throughput they get security - Encryption, data integrity, ... Multiple types of service: Application usually choose between TCP and UDP - TCP and UDP are transport layer - Employed by most application layer programs - Other Transport layer, or pseudo-transport layer protocols exist. - SCTP (stream control transmission protocol), SSU (I2P app), DCCP, RUDP, UDP-lite, etc. - An application designer could design their own transport layer protocol, since Transport layer and up runs on end hosts, as opposed to network infrastructure. - Could build into the core/kernel of end operating systems and languages as new socket type. - Could also just begin the features into the application layer, rather than actually get a transport protocol built into the kernel of an OS. - UDP lets you build new things! TCP Connection-oriented service - TCP has the client and server exchange transport-layer control information with each other, before the application-level messages begin to flow. - This so-called handshaking procedure alerts the client and server, allow them to prepare for an onslaught of packets. - After the handshaking phase, a TCP connection is said to exist between the sockets of the two processes. - The connection is a full-duplex connection, in that the two processes can both send messages to each other over the connection at the same time, bi-directionally - When the application finishes sending messages, it must tear down the connection. TCP has a reliable data transfer service - The communicating process can rely on TCP to deliver all data sent without error and in the proper order. TCP also includes a congestion-control mechanism - The TCP congestion-control mechanism throttles a sending process (client or server) when the network is congested between sender and receiver. Summary reliable transport: between sending and receiving process flow control: sender won't overwhelm receiver congestion control: throttle sender when network overloaded does ot provide: timing, minimum throughput guarantee, security connection-oriented: setup required between client and server process UDP UDP is a no-fills, lightweight, transport protocol, providing minimal services. UDP is a connectionless, so there is no handshaking before the two processes start to communicate. UDP provides an unreliable data transfer service When a process sends a message will ever reach the receiving process. Messages that do arrive at the receiving process may arrive out of order. UDP does not include a congestion-control mechanism, so the sending side of UDP can attempt to pump data into the layer below (the network layer) at any rate ot pleases UDP service: - Unreliable data transfer between sending and receiving process - Does not provide: reliability, flow control, congestion control, timing, throughput guarantee, security, or connection setup. Encryption Neither base TCP nor UDP provide any encryption! An Enhancement for TCP provides: encryption, data integrity, and end-point authentication. The great thing about a TLS joke, is that you can tell if it's not the original... This security enhancement used to be called Secure Sockets Layer (SSL) Transport layer security (TLS) is just a newer version of SSL. SSL was the name of now-defunct versions of what is now modern TLS. TLS is not a third Internet transport protocol, on the same level as TCP and UDP, but an enhancement of TCP, at the application layer. Applications needs to include TLS code (existing libraries) in both the client and server sides of the application. TLS has its own socket API that is similar to the traditional TCP socket API. Sending process passes cleartext data to the SSL socket. TLS in the sending host then encrypts the data and passes the encrypted data to the TCP socket. Encrypted data travels over the Internet to the TCP socket in the receiving process. Receiving socket passes the encrypted data to SSL, which decrypts the data. TLS passes the cleartext data through its SSL socket to the receiving process. TLS socket API is like that of a TCP socket (just important and use). Tunneling: Inner-most -> Outer-more... > Outer-most Application -> TLS -> TCP -> MAC -> Ethernet -> Physical Application-layer protocols An application-layer protocol defines how an application's processes, running on different end systems, pass messages to each other, for exmaple: The type of messages exchanged, for example, request messages and response messages E.g., request, response The syntax of the various message types, such as the fields in the message and how the fields are delineated The semantics of the fields Meaning of the information in the fields Rules for determining when and how a process sends messages and responds to messages, and change state. Open protocols: defined in RFCs allows for interoperability e.g., HTTP, SMTP Proprietary protocols: e.g., Skype (sued to be open, fun story) Web and HTTP","title":"02Application"},{"location":"senior/Computer_Networks/02Application/#02-application","text":"","title":"02 - Application"},{"location":"senior/Computer_Networks/02Application/#network-applications","text":"Classic text-based applications that became popular in the 1970s and 1980s: text email. remote access to computers, file transfers, and newsgroups. Killer application of the mid-1990s: The World Wide Web, encompassing Web surfing, search, and electronic commerce. Instant messaging and P2P file sharing, the two killer applications introduced at the end of the millennium. Since 2000, voice-over-IP (VoIP), YouTube, Netflix, World of Warcraft, Facebook, and Twitter. Goal write program that: - run on (different) end systems - communicate over network - e.g., web server software communicates with browser software No need (or desire) to write software for network-core devices: - network-core devices do not (and SHOULD not) run user applications! - applications on end systems allows for rapid app development, propagation, innovation - this is changing somewhat, which could impede the development of new protocols.","title":"Network applications"},{"location":"senior/Computer_Networks/02Application/#server","text":"Always-on host, called the server, which services requests from many other hosts, called clients. permanent address IP address Overlay/hash address of some kind in the case of IP-anonymizing networks Web server services requests from browsers running on client hosts. When a Web server receives a request for an object from a client hosts, it responds by sending the requested object to the client host. Now in data centers for scaling","title":"Server"},{"location":"senior/Computer_Networks/02Application/#client","text":"Communicate with server Maybe be intermittently connected May have dynamic IP addresses (or dynamically changing overlay addresses) Do not usually communicate directly with each other (unless hybrid client-server/p2p with p2p).","title":"Client"},{"location":"senior/Computer_Networks/02Application/#p2p-architecture","text":"Minimal (or no) reliance on dedicated servers in data centers. Direct communication between pairs of intermittently connected hosts, called peers. The peers are not owned by the service provider, but are instead desktops and laptops controlled by users, with most of the peers residing in homes, universities, and offices. Peers request service from other peers, provide service in return to other peers Self-scalability: each peer adds service capacity to the system by distributing files to other peers. Cost effective, since they normally don't require significant server infrastructure and server bandwidth (in contrast with clients-server designs with data centers) Peers often exchange IP addresses (or overlay address, e.g., onion, garlic routing and crypto addresses). Complex management, implementation, debugging?","title":"P2P architecture"},{"location":"senior/Computer_Networks/02Application/#processes","text":"It's not actually programs, but processes that communicate with each other. A process is assigned by OS to a program that is running within an end system. WHen processes are running on the same end system, they can communicate with each other with inter-process communication (IPC) Processes on two different end systems communicate with each other by exchanging messages across the computer network. A sending process creates and sends messages into the network A receiving process receives these messages and possibly responds by sending messages back. Processes that initiates that communication (that is, initially contacts the other process at the beginning of the session) is nominally, if not substantially, labeled as the client . The process that waits to be contacted to begin the session is nominally the server","title":"Processes"},{"location":"senior/Computer_Networks/02Application/#sockets","text":"Any message sent from one process to another must go through the underlying network. A process sends messages into, and receives messages from, the network through an OS-defined software interface called a socket . A socket is the interface between the application layer and the within a host OS. It is also referred to as the Application Programming Interface (API) between the application and the network, since the socket is the programming interface with which network applications are built.","title":"Sockets"},{"location":"senior/Computer_Networks/02Application/#addresses","text":"To receive messages, process must have identifier Q: Does the IP address of a host, on which a process runs, suffice for identifying the process? A: No, many processes can be running on one host In order for a process running on one host to send packets to a process running on another host, the receiving process needs to have an address with: address of the host OS itself (IP) Identifier that specifies the specific receiving process in the destination host OS Popular applications have been assigned specific port numbers, e.g., A Web server (using the HTTP protocol) is usually identified by port number 80. A mail server process (using the SMTP protocol) is usually identified by port number 25. An SSH server is usually identified on port number 22. For example, to send HTTP message to gaia.cs.umass.edu web server: IP address: 128.119.245.12 port number: 80 Hosts are often identified by IP address - IP address is a 32-bit quantity uniquely identifying the host, in ipv4. - Addresses are 128 bit for ipv6. - We ran out of ipv4 addresses... - The sending process must also identify the receiving process (more specifically, the receiving socket) running in the host. - This is information is needed because in general a host could be running many network applications. - A destination port number serves this purpose.","title":"Addresses"},{"location":"senior/Computer_Networks/02Application/#preview-of-transport-services","text":"Data integrity - Some apps (e.g., file transfer, web transactions) require 100% reliable data transfer - Other apps (e.g., audio) can tolerate some loss timing - Some apps (e.g., Internet telephony, interactive games) require low delay to be \"effective\" - Some apps (e.g., file download) tolerate delay throughput - Some apps (e.g., multimedia) require minimum amount of throughput to be \"effective\" - Other apps (\"elastic apps\") make use of whatever throughput they get security - Encryption, data integrity, ...","title":"Preview of transport services"},{"location":"senior/Computer_Networks/02Application/#multiple-types-of-service","text":"Application usually choose between TCP and UDP - TCP and UDP are transport layer - Employed by most application layer programs - Other Transport layer, or pseudo-transport layer protocols exist. - SCTP (stream control transmission protocol), SSU (I2P app), DCCP, RUDP, UDP-lite, etc. - An application designer could design their own transport layer protocol, since Transport layer and up runs on end hosts, as opposed to network infrastructure. - Could build into the core/kernel of end operating systems and languages as new socket type. - Could also just begin the features into the application layer, rather than actually get a transport protocol built into the kernel of an OS. - UDP lets you build new things!","title":"Multiple types of service:"},{"location":"senior/Computer_Networks/02Application/#tcp","text":"Connection-oriented service - TCP has the client and server exchange transport-layer control information with each other, before the application-level messages begin to flow. - This so-called handshaking procedure alerts the client and server, allow them to prepare for an onslaught of packets. - After the handshaking phase, a TCP connection is said to exist between the sockets of the two processes. - The connection is a full-duplex connection, in that the two processes can both send messages to each other over the connection at the same time, bi-directionally - When the application finishes sending messages, it must tear down the connection. TCP has a reliable data transfer service - The communicating process can rely on TCP to deliver all data sent without error and in the proper order. TCP also includes a congestion-control mechanism - The TCP congestion-control mechanism throttles a sending process (client or server) when the network is congested between sender and receiver. Summary reliable transport: between sending and receiving process flow control: sender won't overwhelm receiver congestion control: throttle sender when network overloaded does ot provide: timing, minimum throughput guarantee, security connection-oriented: setup required between client and server process","title":"TCP"},{"location":"senior/Computer_Networks/02Application/#udp","text":"UDP is a no-fills, lightweight, transport protocol, providing minimal services. UDP is a connectionless, so there is no handshaking before the two processes start to communicate. UDP provides an unreliable data transfer service When a process sends a message will ever reach the receiving process. Messages that do arrive at the receiving process may arrive out of order. UDP does not include a congestion-control mechanism, so the sending side of UDP can attempt to pump data into the layer below (the network layer) at any rate ot pleases UDP service: - Unreliable data transfer between sending and receiving process - Does not provide: reliability, flow control, congestion control, timing, throughput guarantee, security, or connection setup.","title":"UDP"},{"location":"senior/Computer_Networks/02Application/#encryption","text":"Neither base TCP nor UDP provide any encryption! An Enhancement for TCP provides: encryption, data integrity, and end-point authentication. The great thing about a TLS joke, is that you can tell if it's not the original... This security enhancement used to be called Secure Sockets Layer (SSL) Transport layer security (TLS) is just a newer version of SSL. SSL was the name of now-defunct versions of what is now modern TLS. TLS is not a third Internet transport protocol, on the same level as TCP and UDP, but an enhancement of TCP, at the application layer. Applications needs to include TLS code (existing libraries) in both the client and server sides of the application. TLS has its own socket API that is similar to the traditional TCP socket API. Sending process passes cleartext data to the SSL socket. TLS in the sending host then encrypts the data and passes the encrypted data to the TCP socket. Encrypted data travels over the Internet to the TCP socket in the receiving process. Receiving socket passes the encrypted data to SSL, which decrypts the data. TLS passes the cleartext data through its SSL socket to the receiving process. TLS socket API is like that of a TCP socket (just important and use). Tunneling: Inner-most -> Outer-more... > Outer-most Application -> TLS -> TCP -> MAC -> Ethernet -> Physical","title":"Encryption"},{"location":"senior/Computer_Networks/02Application/#application-layer-protocols","text":"An application-layer protocol defines how an application's processes, running on different end systems, pass messages to each other, for exmaple: The type of messages exchanged, for example, request messages and response messages E.g., request, response The syntax of the various message types, such as the fields in the message and how the fields are delineated The semantics of the fields Meaning of the information in the fields Rules for determining when and how a process sends messages and responds to messages, and change state. Open protocols: defined in RFCs allows for interoperability e.g., HTTP, SMTP Proprietary protocols: e.g., Skype (sued to be open, fun story)","title":"Application-layer protocols"},{"location":"senior/Computer_Networks/02Application/#web-and-http","text":"","title":"Web and HTTP"},{"location":"senior/Computer_Networks/Computer_Networks/","text":"Computer Networks All information from this wiki is pulled from my Professor's public wiki: csnr.dev 00 - Inspiration 01 - Overview 02 - Application Cahoot Questions and Answers Cahoot-01-1 Q: A: Forwarding Cahoot-01-3 Q: A: Application Cahoot-01-4 Q: A: Network Cahoot-02-1 Q: What is not a benefit of P2P over central services? A: Ease of coding Cahoot-02-2 Q: Application layer address is most commonly a tuple of what? A: Port, IP Cahoot-02-3 Q: It is impossible to achieve data-reliability when using UDP (using any mechanism). A: False","title":"Computer Networks"},{"location":"senior/Computer_Networks/Computer_Networks/#computer-networks","text":"All information from this wiki is pulled from my Professor's public wiki: csnr.dev 00 - Inspiration 01 - Overview 02 - Application","title":"Computer Networks"},{"location":"senior/Computer_Networks/Computer_Networks/#cahoot-questions-and-answers","text":"","title":"Cahoot Questions and Answers"},{"location":"senior/Computer_Networks/Computer_Networks/#cahoot-01-1","text":"Q: A: Forwarding","title":"Cahoot-01-1"},{"location":"senior/Computer_Networks/Computer_Networks/#cahoot-01-3","text":"Q: A: Application","title":"Cahoot-01-3"},{"location":"senior/Computer_Networks/Computer_Networks/#cahoot-01-4","text":"Q: A: Network","title":"Cahoot-01-4"},{"location":"senior/Computer_Networks/Computer_Networks/#cahoot-02-1","text":"Q: What is not a benefit of P2P over central services? A: Ease of coding","title":"Cahoot-02-1"},{"location":"senior/Computer_Networks/Computer_Networks/#cahoot-02-2","text":"Q: Application layer address is most commonly a tuple of what? A: Port, IP","title":"Cahoot-02-2"},{"location":"senior/Computer_Networks/Computer_Networks/#cahoot-02-3","text":"Q: It is impossible to achieve data-reliability when using UDP (using any mechanism). A: False","title":"Cahoot-02-3"}]}